// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mindmath.Repository.Persistence;

#nullable disable

namespace Mindmath.Repository.Migrations
{
    [DbContext(typeof(MindmathDbContext))]
    [Migration("20241022134405_AddDeletedAtColumn")]
    partial class AddDeletedAtColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e2c41f1e-bc94-42f8-beb5-10d3a2a406dd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ab84eb31-7aaa-4e44-8aa9-409be54014c8",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdf594dd-ccc1-4ea8-96a0-050373ef9798"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(7547),
                            Description = "This chapter deals with trigonometry and its applications in solving problems related to triangles and other geometric shapes.",
                            Name = "Trigonometry",
                            SubjectId = new Guid("f5a42f20-64ef-43b6-aeef-a4686a3b19dd")
                        },
                        new
                        {
                            Id = new Guid("93d95c83-6594-465d-a906-7f8f899a2bfc"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(7554),
                            Description = "This chapter deals with calculus and its applications in solving problems related to rates of change and accumulation.",
                            Name = "Calculus",
                            SubjectId = new Guid("f5a42f20-64ef-43b6-aeef-a4686a3b19dd")
                        },
                        new
                        {
                            Id = new Guid("564396d4-d864-49c2-a16c-122114f2e9b4"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(7558),
                            Description = "This chapter deals with algebra and its applications in solving problems related to equations and inequalities.",
                            Name = "Algebra",
                            SubjectId = new Guid("f5a42f20-64ef-43b6-aeef-a4686a3b19dd")
                        },
                        new
                        {
                            Id = new Guid("32c1e4f7-36fc-44b8-9476-b2ac48f4504a"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(7561),
                            Description = "This chapter is a branch of mathematics that deals with the properties, relationships, and measurements of points, lines, shapes, and spaces. It is one of the oldest fields of mathematics and has wide applications in various fields, from art and architecture to engineering and physics",
                            Name = "Geometry",
                            SubjectId = new Guid("f5a42f20-64ef-43b6-aeef-a4686a3b19dd")
                        });
                });

            modelBuilder.Entity("Mindmath.Repository.Models.InputParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProblemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("InputParameters");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.ProblemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfInputs")
                        .HasColumnType("int");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("ProblemTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46e5e215-6d10-443d-9ce0-e5f7d3948232"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 765, DateTimeKind.Local).AddTicks(1816),
                            Description = "Use the formula to find the circumference.",
                            Name = "Circumference of a Circle",
                            NumberOfInputs = 1,
                            TopicId = new Guid("37f7aef3-f5ec-4f95-bc88-ab929877b3d5")
                        },
                        new
                        {
                            Id = new Guid("9e6d4852-9316-4006-ac2d-2e116d1fa233"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 765, DateTimeKind.Local).AddTicks(1826),
                            Description = "Use the formula to find the area.",
                            Name = "Area of a Circle",
                            NumberOfInputs = 1,
                            TopicId = new Guid("37f7aef3-f5ec-4f95-bc88-ab929877b3d5")
                        },
                        new
                        {
                            Id = new Guid("16a537b0-b0f8-47a5-8098-bc86926e3aa1"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 765, DateTimeKind.Local).AddTicks(1829),
                            Description = "Use the formula to find the perimeter.",
                            Name = "Perimeter of a triangle",
                            NumberOfInputs = 3,
                            TopicId = new Guid("f5a42f20-64ef-43b6-aeef-a4686a3b19dd")
                        },
                        new
                        {
                            Id = new Guid("93b76880-6e22-42f3-ad53-aa5490b6b31a"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 765, DateTimeKind.Local).AddTicks(1832),
                            Description = "Use the formula to find the area.",
                            Name = "Area of a triangle",
                            NumberOfInputs = 2,
                            TopicId = new Guid("f5a42f20-64ef-43b6-aeef-a4686a3b19dd")
                        });
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InputParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InputParameterId")
                        .IsUnique()
                        .HasFilter("[InputParameterId] IS NOT NULL");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("Solution");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5a42f20-64ef-43b6-aeef-a4686a3b19dd"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(5620),
                            Description = "The study of numbers, quantities, structures, shapes, space, and change. It involves abstract concepts as well as practical problem-solving techniques that are essential in various fields such as science, engineering, economics, and more.",
                            Name = "Mathematics"
                        });
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e552a68-c165-4007-a361-adc57e728193"),
                            Active = true,
                            ChapterId = new Guid("564396d4-d864-49c2-a16c-122114f2e9b4"),
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(9199),
                            Description = "Covers solving linear equations and inequalities. Focuses on understanding equality and inequality symbols and how to manipulate equations to isolate variables.",
                            Name = "Equations and Inequalities"
                        },
                        new
                        {
                            Id = new Guid("d296dbc2-f3a9-4bcd-85c1-cbb8f89ed3a8"),
                            Active = true,
                            ChapterId = new Guid("564396d4-d864-49c2-a16c-122114f2e9b4"),
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(9208),
                            Description = "Deals with equations involving two variables. Focuses on graphing these equations on a coordinate plane and understanding their geometric interpretation.",
                            Name = "Linear Equations"
                        },
                        new
                        {
                            Id = new Guid("66942ddf-c7c3-4a36-b8d3-a4b037ef8d1a"),
                            Active = true,
                            ChapterId = new Guid("564396d4-d864-49c2-a16c-122114f2e9b4"),
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(9211),
                            Description = "Introduction to quadratic equations and methods for solving them such as factoring, completing the square, and using the quadratic formula.",
                            Name = "Quadratic Equations"
                        },
                        new
                        {
                            Id = new Guid("f5a42f20-64ef-43b6-aeef-a4686a3b19dd"),
                            Active = true,
                            ChapterId = new Guid("32c1e4f7-36fc-44b8-9476-b2ac48f4504a"),
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(9214),
                            Description = "Explains the classification of triangles based on sides (equilateral, isosceles, scalene) and angles (acute, obtuse, right). It also introduces the properties of triangles and the Triangle Inequality Theorem.",
                            Name = "Triangles"
                        },
                        new
                        {
                            Id = new Guid("37f7aef3-f5ec-4f95-bc88-ab929877b3d5"),
                            Active = true,
                            ChapterId = new Guid("32c1e4f7-36fc-44b8-9476-b2ac48f4504a"),
                            CreatedAt = new DateTime(2024, 10, 22, 20, 44, 4, 764, DateTimeKind.Local).AddTicks(9218),
                            Description = "Explains the properties of circles, including radius, diameter, chord, tangent, secant, arc, and sector. Covers important theorems related to angles in circles, such as the Inscribed Angle Theorem and Tangent-Secant Theorem.",
                            Name = "Circles"
                        });
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Chapter", b =>
                {
                    b.HasOne("Mindmath.Repository.Models.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.InputParameter", b =>
                {
                    b.HasOne("Mindmath.Repository.Models.ProblemType", "ProblemType")
                        .WithMany("InputParameters")
                        .HasForeignKey("ProblemTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mindmath.Repository.Models.User", "User")
                        .WithMany("InputParameters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProblemType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.ProblemType", b =>
                {
                    b.HasOne("Mindmath.Repository.Models.Topic", "Topic")
                        .WithMany("ProblemTypes")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Solution", b =>
                {
                    b.HasOne("Mindmath.Repository.Models.InputParameter", "InputParameter")
                        .WithOne("Solution")
                        .HasForeignKey("Mindmath.Repository.Models.Solution", "InputParameterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mindmath.Repository.Models.Transaction", "Transaction")
                        .WithOne("Solution")
                        .HasForeignKey("Mindmath.Repository.Models.Solution", "TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InputParameter");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Topic", b =>
                {
                    b.HasOne("Mindmath.Repository.Models.Chapter", "Chapter")
                        .WithMany("Topics")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Transaction", b =>
                {
                    b.HasOne("Mindmath.Repository.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Wallet", b =>
                {
                    b.HasOne("Mindmath.Repository.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Mindmath.Repository.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Chapter", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.InputParameter", b =>
                {
                    b.Navigation("Solution")
                        .IsRequired();
                });

            modelBuilder.Entity("Mindmath.Repository.Models.ProblemType", b =>
                {
                    b.Navigation("InputParameters");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Subject", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Topic", b =>
                {
                    b.Navigation("ProblemTypes");
                });

            modelBuilder.Entity("Mindmath.Repository.Models.Transaction", b =>
                {
                    b.Navigation("Solution")
                        .IsRequired();
                });

            modelBuilder.Entity("Mindmath.Repository.Models.User", b =>
                {
                    b.Navigation("InputParameters");

                    b.Navigation("Transactions");

                    b.Navigation("Wallet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
